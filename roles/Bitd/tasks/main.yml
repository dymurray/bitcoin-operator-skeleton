---
- name: create pvc
  k8s:
    definition:
      kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: bitcoin
        namespace: "{{ meta.namespace }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi

# tasks file for Bitd
- name: start bitd
  k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: '{{ meta.name }}-bitd'
        namespace: '{{ meta.namespace }}'
      spec:
        selector:
          matchLabels:
            app: bitd
        template:
          metadata:
            labels:
              app: bitd
          spec:
            containers:
            - name: bitd
              image: "docker.io/dymurray/bitcoin-sv-bitd"
              ports:
                - containerPort: 8332
              volumeMounts:
                - name: bitcoin
                  mountPath: /root/.bitcoin
            volumes:
              - name: bitcoin
                persistentVolumeClaim:
                  claimName: bitcoin
  register: dep

- name: create service
  k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: '{{ meta.name }}-bitd'
        namespace: '{{ meta.namespace }}'
      spec:
        type: NodePort
        selector:
          app: bitd
        ports:
        - protocol: TCP
          port: 8332
          targetPort: 8332
          name: rpc
  register: svc

- uri:
    url: http://{{ svc.result.spec.clusterIP }}:{{ svc.result.spec.ports[0].port }}
    method: POST
    user: "{{ user }}"
    password: "{{ password }}"
    body: "{{ lookup('file', 'getblockchaininfo.json') }}"
    force_basic_auth: yes
    body_format: json
  register: chaininfo

- set_fact:
    synced: "{{ true if chaininfo.json.result.blocks | int == chaininfo.json.result.headers | int else false }}"

- k8s_status:
    api_version: bitcoin.example.com/v1
    kind: Bitd
    name: "{{ meta.name }}"
    namespace: "{{ meta.namespace }}"
    status:
      blockCount: "{{ chaininfo.json.result.blocks }}"
      headerCount: "{{ chaininfo.json.result.headers }}"
      synced: "{{ synced }}"
